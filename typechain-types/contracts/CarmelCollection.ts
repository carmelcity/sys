/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace CarmelBase {
  export type CarmelFingerprintStruct = {
    keyId: BigNumberish;
    username: BytesLike;
    message: BytesLike;
    signature: BytesLike;
  };

  export type CarmelFingerprintStructOutput = [
    keyId: bigint,
    username: string,
    message: string,
    signature: string
  ] & { keyId: bigint; username: string; message: string; signature: string };
}

export interface CarmelCollectionInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "approve"
      | "balanceOf"
      | "bytes32ToString"
      | "getApproved"
      | "getConfig"
      | "getLevel"
      | "initialize"
      | "isApprovedForAll"
      | "name"
      | "ownerOf"
      | "safeMintBatch"
      | "safeTransferFrom(address,address,uint256)"
      | "safeTransferFrom(address,address,uint256,bytes)"
      | "setApprovalForAll"
      | "supportsInterface"
      | "symbol"
      | "tokenURI"
      | "totalSupply"
      | "transferFrom"
      | "updateConfig"
      | "updateHash"
      | "updateLevel"
      | "updatePerms"
      | "version"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Approval"
      | "ApprovalForAll"
      | "CarmelAssetDataUpdated"
      | "CarmelAssetMinted"
      | "CarmelAssetStateUpdated"
      | "Initialized"
      | "Transfer"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "bytes32ToString",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getConfig",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getLevel",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      BytesLike,
      AddressLike,
      AddressLike,
      BytesLike,
      BytesLike,
      BytesLike,
      string,
      string,
      BytesLike,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeMintBatch",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateConfig",
    values: [BytesLike, BytesLike, CarmelBase.CarmelFingerprintStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "updateHash",
    values: [
      BigNumberish,
      BytesLike,
      BytesLike,
      CarmelBase.CarmelFingerprintStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateLevel",
    values: [AddressLike, BigNumberish, CarmelBase.CarmelFingerprintStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePerms",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "bytes32ToString",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getConfig", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getLevel", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "safeMintBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updateHash", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateLevel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePerms",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    approved: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [owner: string, approved: string, tokenId: bigint];
  export interface OutputObject {
    owner: string;
    approved: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ApprovalForAllEvent {
  export type InputTuple = [
    owner: AddressLike,
    operator: AddressLike,
    approved: boolean
  ];
  export type OutputTuple = [
    owner: string,
    operator: string,
    approved: boolean
  ];
  export interface OutputObject {
    owner: string;
    operator: string;
    approved: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CarmelAssetDataUpdatedEvent {
  export type InputTuple = [tokenId: BigNumberish];
  export type OutputTuple = [tokenId: bigint];
  export interface OutputObject {
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CarmelAssetMintedEvent {
  export type InputTuple = [
    collectionId: BytesLike,
    owner: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [
    collectionId: string,
    owner: string,
    tokenId: bigint
  ];
  export interface OutputObject {
    collectionId: string;
    owner: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CarmelAssetStateUpdatedEvent {
  export type InputTuple = [
    kind: BigNumberish,
    collectionId: BytesLike,
    tokenId: BigNumberish,
    rev: BigNumberish,
    key: BytesLike,
    val: BytesLike
  ];
  export type OutputTuple = [
    kind: bigint,
    collectionId: string,
    tokenId: bigint,
    rev: bigint,
    key: string,
    val: string
  ];
  export interface OutputObject {
    kind: bigint;
    collectionId: string;
    tokenId: bigint;
    rev: bigint;
    key: string;
    val: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, tokenId: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface CarmelCollection extends BaseContract {
  connect(runner?: ContractRunner | null): CarmelCollection;
  waitForDeployment(): Promise<this>;

  interface: CarmelCollectionInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  approve: TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<[owner: AddressLike], [bigint], "view">;

  bytes32ToString: TypedContractMethod<[_bytes32: BytesLike], [string], "view">;

  getApproved: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  getConfig: TypedContractMethod<[key: BytesLike], [string], "view">;

  getLevel: TypedContractMethod<[addr: AddressLike], [bigint], "view">;

  initialize: TypedContractMethod<
    [
      user: BytesLike,
      reg: AddressLike,
      token: AddressLike,
      collectionId: BytesLike,
      defaultHash0: BytesLike,
      defaultHash1: BytesLike,
      name: string,
      symbol: string,
      supply: BytesLike,
      price: BytesLike,
      batch: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  isApprovedForAll: TypedContractMethod<
    [owner: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;

  name: TypedContractMethod<[], [string], "view">;

  ownerOf: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  safeMintBatch: TypedContractMethod<
    [quantity: BigNumberish],
    [void],
    "payable"
  >;

  "safeTransferFrom(address,address,uint256)": TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  "safeTransferFrom(address,address,uint256,bytes)": TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  setApprovalForAll: TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  symbol: TypedContractMethod<[], [string], "view">;

  tokenURI: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  transferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateConfig: TypedContractMethod<
    [
      key: BytesLike,
      val: BytesLike,
      fingerprint: CarmelBase.CarmelFingerprintStruct
    ],
    [void],
    "nonpayable"
  >;

  updateHash: TypedContractMethod<
    [
      tokenId: BigNumberish,
      h0: BytesLike,
      h1: BytesLike,
      fingerprint: CarmelBase.CarmelFingerprintStruct
    ],
    [void],
    "nonpayable"
  >;

  updateLevel: TypedContractMethod<
    [
      addr: AddressLike,
      level: BigNumberish,
      fingerprint: CarmelBase.CarmelFingerprintStruct
    ],
    [void],
    "nonpayable"
  >;

  updatePerms: TypedContractMethod<
    [addr: AddressLike, level: BigNumberish],
    [void],
    "nonpayable"
  >;

  version: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[owner: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "bytes32ToString"
  ): TypedContractMethod<[_bytes32: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getApproved"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getConfig"
  ): TypedContractMethod<[key: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getLevel"
  ): TypedContractMethod<[addr: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      user: BytesLike,
      reg: AddressLike,
      token: AddressLike,
      collectionId: BytesLike,
      defaultHash0: BytesLike,
      defaultHash1: BytesLike,
      name: string,
      symbol: string,
      supply: BytesLike,
      price: BytesLike,
      batch: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isApprovedForAll"
  ): TypedContractMethod<
    [owner: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ownerOf"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "safeMintBatch"
  ): TypedContractMethod<[quantity: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256)"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256,bytes)"
  ): TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setApprovalForAll"
  ): TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "tokenURI"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateConfig"
  ): TypedContractMethod<
    [
      key: BytesLike,
      val: BytesLike,
      fingerprint: CarmelBase.CarmelFingerprintStruct
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateHash"
  ): TypedContractMethod<
    [
      tokenId: BigNumberish,
      h0: BytesLike,
      h1: BytesLike,
      fingerprint: CarmelBase.CarmelFingerprintStruct
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateLevel"
  ): TypedContractMethod<
    [
      addr: AddressLike,
      level: BigNumberish,
      fingerprint: CarmelBase.CarmelFingerprintStruct
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updatePerms"
  ): TypedContractMethod<
    [addr: AddressLike, level: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "version"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "ApprovalForAll"
  ): TypedContractEvent<
    ApprovalForAllEvent.InputTuple,
    ApprovalForAllEvent.OutputTuple,
    ApprovalForAllEvent.OutputObject
  >;
  getEvent(
    key: "CarmelAssetDataUpdated"
  ): TypedContractEvent<
    CarmelAssetDataUpdatedEvent.InputTuple,
    CarmelAssetDataUpdatedEvent.OutputTuple,
    CarmelAssetDataUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "CarmelAssetMinted"
  ): TypedContractEvent<
    CarmelAssetMintedEvent.InputTuple,
    CarmelAssetMintedEvent.OutputTuple,
    CarmelAssetMintedEvent.OutputObject
  >;
  getEvent(
    key: "CarmelAssetStateUpdated"
  ): TypedContractEvent<
    CarmelAssetStateUpdatedEvent.InputTuple,
    CarmelAssetStateUpdatedEvent.OutputTuple,
    CarmelAssetStateUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "ApprovalForAll(address,address,bool)": TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;
    ApprovalForAll: TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;

    "CarmelAssetDataUpdated(uint256)": TypedContractEvent<
      CarmelAssetDataUpdatedEvent.InputTuple,
      CarmelAssetDataUpdatedEvent.OutputTuple,
      CarmelAssetDataUpdatedEvent.OutputObject
    >;
    CarmelAssetDataUpdated: TypedContractEvent<
      CarmelAssetDataUpdatedEvent.InputTuple,
      CarmelAssetDataUpdatedEvent.OutputTuple,
      CarmelAssetDataUpdatedEvent.OutputObject
    >;

    "CarmelAssetMinted(bytes32,address,uint256)": TypedContractEvent<
      CarmelAssetMintedEvent.InputTuple,
      CarmelAssetMintedEvent.OutputTuple,
      CarmelAssetMintedEvent.OutputObject
    >;
    CarmelAssetMinted: TypedContractEvent<
      CarmelAssetMintedEvent.InputTuple,
      CarmelAssetMintedEvent.OutputTuple,
      CarmelAssetMintedEvent.OutputObject
    >;

    "CarmelAssetStateUpdated(uint8,bytes32,uint256,uint256,bytes32,bytes32)": TypedContractEvent<
      CarmelAssetStateUpdatedEvent.InputTuple,
      CarmelAssetStateUpdatedEvent.OutputTuple,
      CarmelAssetStateUpdatedEvent.OutputObject
    >;
    CarmelAssetStateUpdated: TypedContractEvent<
      CarmelAssetStateUpdatedEvent.InputTuple,
      CarmelAssetStateUpdatedEvent.OutputTuple,
      CarmelAssetStateUpdatedEvent.OutputObject
    >;

    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
  };
}
