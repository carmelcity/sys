/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface CarmelUtilsInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "base64encode"
      | "bytes32ToBase64String"
      | "cleanString"
      | "toByte"
      | "validChars"
      | "validateSignature"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "base64encode",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "bytes32ToBase64String",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "cleanString",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "toByte",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "validChars",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "validateSignature",
    values: [
      BigNumberish,
      [BigNumberish, BigNumberish],
      [BigNumberish, BigNumberish]
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "base64encode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bytes32ToBase64String",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cleanString",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "toByte", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "validChars", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "validateSignature",
    data: BytesLike
  ): Result;
}

export interface CarmelUtils extends BaseContract {
  connect(runner?: ContractRunner | null): CarmelUtils;
  waitForDeployment(): Promise<this>;

  interface: CarmelUtilsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  base64encode: TypedContractMethod<[_str: string], [string], "view">;

  bytes32ToBase64String: TypedContractMethod<
    [_bytes32: BytesLike],
    [string],
    "view"
  >;

  cleanString: TypedContractMethod<[_bytes32: BytesLike], [string], "view">;

  toByte: TypedContractMethod<[_uint8: BigNumberish], [string], "view">;

  validChars: TypedContractMethod<[_bytes32: BytesLike], [bigint], "view">;

  validateSignature: TypedContractMethod<
    [
      message: BigNumberish,
      rs: [BigNumberish, BigNumberish],
      Q: [BigNumberish, BigNumberish]
    ],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "base64encode"
  ): TypedContractMethod<[_str: string], [string], "view">;
  getFunction(
    nameOrSignature: "bytes32ToBase64String"
  ): TypedContractMethod<[_bytes32: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "cleanString"
  ): TypedContractMethod<[_bytes32: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "toByte"
  ): TypedContractMethod<[_uint8: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "validChars"
  ): TypedContractMethod<[_bytes32: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "validateSignature"
  ): TypedContractMethod<
    [
      message: BigNumberish,
      rs: [BigNumberish, BigNumberish],
      Q: [BigNumberish, BigNumberish]
    ],
    [boolean],
    "view"
  >;

  filters: {};
}
