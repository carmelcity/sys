/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace CarmelRegistry {
  export type AccountStruct = {
    id: BigNumberish;
    username: BytesLike;
    group: BytesLike;
    total_keys: BigNumberish;
    total_addresses: BigNumberish;
  };

  export type AccountStructOutput = [
    id: bigint,
    username: string,
    group: string,
    total_keys: bigint,
    total_addresses: bigint
  ] & {
    id: bigint;
    username: string;
    group: string;
    total_keys: bigint;
    total_addresses: bigint;
  };
}

export interface CarmelRegistryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "accountImpl"
      | "accounts"
      | "addKey"
      | "addresses"
      | "entryPointAddress"
      | "group"
      | "initialize"
      | "keys_x"
      | "keys_y"
      | "owner"
      | "perms"
      | "register"
      | "total_accounts"
      | "updatePerms"
      | "usernames"
      | "verifierAddress"
      | "version"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;

  encodeFunctionData(
    functionFragment: "accountImpl",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "accounts", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "addKey",
    values: [BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addresses",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "entryPointAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "group", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "keys_x",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "keys_y",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "perms", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "register",
    values: [BytesLike, BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "total_accounts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updatePerms",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "usernames",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "verifierAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "accountImpl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "accounts", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addKey", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addresses", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "entryPointAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "group", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "keys_x", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "keys_y", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "perms", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "register", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "total_accounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePerms",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "usernames", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "verifierAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface CarmelRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): CarmelRegistry;
  waitForDeployment(): Promise<this>;

  interface: CarmelRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  accountImpl: TypedContractMethod<[], [string], "view">;

  accounts: TypedContractMethod<
    [arg0: BytesLike],
    [
      [bigint, string, string, bigint, bigint] & {
        id: bigint;
        username: string;
        group: string;
        total_keys: bigint;
        total_addresses: bigint;
      }
    ],
    "view"
  >;

  addKey: TypedContractMethod<
    [username: BytesLike, x: BigNumberish, y: BigNumberish],
    [void],
    "nonpayable"
  >;

  addresses: TypedContractMethod<
    [arg0: BytesLike, arg1: BigNumberish],
    [string],
    "view"
  >;

  entryPointAddress: TypedContractMethod<[], [string], "view">;

  group: TypedContractMethod<
    [grp: BytesLike],
    [CarmelRegistry.AccountStructOutput[]],
    "view"
  >;

  initialize: TypedContractMethod<
    [sender: AddressLike, ep: AddressLike, ver: AddressLike],
    [void],
    "nonpayable"
  >;

  keys_x: TypedContractMethod<
    [arg0: BytesLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  keys_y: TypedContractMethod<
    [arg0: BytesLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  perms: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  register: TypedContractMethod<
    [username: BytesLike, grp: BytesLike, addr: AddressLike],
    [bigint],
    "nonpayable"
  >;

  total_accounts: TypedContractMethod<[], [bigint], "view">;

  updatePerms: TypedContractMethod<
    [addr: AddressLike, level: BigNumberish],
    [void],
    "nonpayable"
  >;

  usernames: TypedContractMethod<
    [arg0: BytesLike, arg1: BigNumberish],
    [string],
    "view"
  >;

  verifierAddress: TypedContractMethod<[], [string], "view">;

  version: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "accountImpl"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "accounts"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [bigint, string, string, bigint, bigint] & {
        id: bigint;
        username: string;
        group: string;
        total_keys: bigint;
        total_addresses: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "addKey"
  ): TypedContractMethod<
    [username: BytesLike, x: BigNumberish, y: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addresses"
  ): TypedContractMethod<
    [arg0: BytesLike, arg1: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "entryPointAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "group"
  ): TypedContractMethod<
    [grp: BytesLike],
    [CarmelRegistry.AccountStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [sender: AddressLike, ep: AddressLike, ver: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "keys_x"
  ): TypedContractMethod<
    [arg0: BytesLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "keys_y"
  ): TypedContractMethod<
    [arg0: BytesLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "perms"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "register"
  ): TypedContractMethod<
    [username: BytesLike, grp: BytesLike, addr: AddressLike],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "total_accounts"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "updatePerms"
  ): TypedContractMethod<
    [addr: AddressLike, level: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "usernames"
  ): TypedContractMethod<
    [arg0: BytesLike, arg1: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "verifierAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "version"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;

  filters: {
    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
  };
}
