/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace CarmelBase {
  export type CarmelFingerprintStruct = {
    keyId: BigNumberish;
    username: BytesLike;
    message: BytesLike;
    signature: BytesLike;
  };

  export type CarmelFingerprintStructOutput = [
    keyId: bigint,
    username: string,
    message: string,
    signature: string
  ] & { keyId: bigint; username: string; message: string; signature: string };

  export type CarmelAccountStruct = {
    id: BigNumberish;
    username: BytesLike;
    group: BytesLike;
    total_keys: BigNumberish;
    total_addresses: BigNumberish;
  };

  export type CarmelAccountStructOutput = [
    id: bigint,
    username: string,
    group: string,
    total_keys: bigint,
    total_addresses: bigint
  ] & {
    id: bigint;
    username: string;
    group: string;
    total_keys: bigint;
    total_addresses: bigint;
  };
}

export interface CarmelRegistryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "accountAddAddress"
      | "accountAddKey"
      | "accountGetKeys"
      | "accountUpdateHash"
      | "getAccount"
      | "getAccountHashes"
      | "getAccounts"
      | "getAddresses"
      | "getPerms"
      | "getTotalAccounts"
      | "initialize"
      | "register"
      | "updatePerms"
      | "updateSystemHash"
      | "verify"
      | "verifyFingerprint"
      | "version"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;

  encodeFunctionData(
    functionFragment: "accountAddAddress",
    values: [AddressLike, CarmelBase.CarmelFingerprintStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "accountAddKey",
    values: [BytesLike, BytesLike, CarmelBase.CarmelFingerprintStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "accountGetKeys",
    values: [CarmelBase.CarmelFingerprintStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "accountUpdateHash",
    values: [BytesLike, BytesLike, CarmelBase.CarmelFingerprintStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccount",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountHashes",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccounts",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAddresses",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPerms",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalAccounts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "register",
    values: [BytesLike, BytesLike, AddressLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePerms",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSystemHash",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "verify",
    values: [CarmelBase.CarmelFingerprintStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyFingerprint",
    values: [CarmelBase.CarmelAccountStruct, CarmelBase.CarmelFingerprintStruct]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "accountAddAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "accountAddKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "accountGetKeys",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "accountUpdateHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getAccount", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAccountHashes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPerms", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTotalAccounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "register", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updatePerms",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSystemHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "verify", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "verifyFingerprint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface CarmelRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): CarmelRegistry;
  waitForDeployment(): Promise<this>;

  interface: CarmelRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  accountAddAddress: TypedContractMethod<
    [addr: AddressLike, fingerprint: CarmelBase.CarmelFingerprintStruct],
    [void],
    "nonpayable"
  >;

  accountAddKey: TypedContractMethod<
    [
      x: BytesLike,
      y: BytesLike,
      fingerprint: CarmelBase.CarmelFingerprintStruct
    ],
    [void],
    "nonpayable"
  >;

  accountGetKeys: TypedContractMethod<
    [fingerprint: CarmelBase.CarmelFingerprintStruct],
    [[string[], string[]]],
    "view"
  >;

  accountUpdateHash: TypedContractMethod<
    [
      m0: BytesLike,
      m1: BytesLike,
      fingerprint: CarmelBase.CarmelFingerprintStruct
    ],
    [void],
    "nonpayable"
  >;

  getAccount: TypedContractMethod<
    [username: BytesLike],
    [CarmelBase.CarmelAccountStructOutput],
    "view"
  >;

  getAccountHashes: TypedContractMethod<
    [username: BytesLike],
    [string[]],
    "view"
  >;

  getAccounts: TypedContractMethod<
    [grp: BytesLike],
    [CarmelBase.CarmelAccountStructOutput[]],
    "view"
  >;

  getAddresses: TypedContractMethod<[username: BytesLike], [string[]], "view">;

  getPerms: TypedContractMethod<[addr: AddressLike], [bigint], "view">;

  getTotalAccounts: TypedContractMethod<[], [bigint], "view">;

  initialize: TypedContractMethod<
    [sender: AddressLike, ver: AddressLike],
    [void],
    "nonpayable"
  >;

  register: TypedContractMethod<
    [
      username: BytesLike,
      grp: BytesLike,
      addr: AddressLike,
      x: BytesLike,
      y: BytesLike
    ],
    [bigint],
    "nonpayable"
  >;

  updatePerms: TypedContractMethod<
    [addr: AddressLike, level: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateSystemHash: TypedContractMethod<
    [username: BytesLike, m0: BytesLike, m1: BytesLike],
    [void],
    "nonpayable"
  >;

  verify: TypedContractMethod<
    [fingerprint: CarmelBase.CarmelFingerprintStruct],
    [boolean],
    "view"
  >;

  verifyFingerprint: TypedContractMethod<
    [
      account: CarmelBase.CarmelAccountStruct,
      fingerprint: CarmelBase.CarmelFingerprintStruct
    ],
    [boolean],
    "view"
  >;

  version: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "accountAddAddress"
  ): TypedContractMethod<
    [addr: AddressLike, fingerprint: CarmelBase.CarmelFingerprintStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "accountAddKey"
  ): TypedContractMethod<
    [
      x: BytesLike,
      y: BytesLike,
      fingerprint: CarmelBase.CarmelFingerprintStruct
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "accountGetKeys"
  ): TypedContractMethod<
    [fingerprint: CarmelBase.CarmelFingerprintStruct],
    [[string[], string[]]],
    "view"
  >;
  getFunction(
    nameOrSignature: "accountUpdateHash"
  ): TypedContractMethod<
    [
      m0: BytesLike,
      m1: BytesLike,
      fingerprint: CarmelBase.CarmelFingerprintStruct
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getAccount"
  ): TypedContractMethod<
    [username: BytesLike],
    [CarmelBase.CarmelAccountStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAccountHashes"
  ): TypedContractMethod<[username: BytesLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "getAccounts"
  ): TypedContractMethod<
    [grp: BytesLike],
    [CarmelBase.CarmelAccountStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAddresses"
  ): TypedContractMethod<[username: BytesLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "getPerms"
  ): TypedContractMethod<[addr: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTotalAccounts"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [sender: AddressLike, ver: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "register"
  ): TypedContractMethod<
    [
      username: BytesLike,
      grp: BytesLike,
      addr: AddressLike,
      x: BytesLike,
      y: BytesLike
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updatePerms"
  ): TypedContractMethod<
    [addr: AddressLike, level: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateSystemHash"
  ): TypedContractMethod<
    [username: BytesLike, m0: BytesLike, m1: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "verify"
  ): TypedContractMethod<
    [fingerprint: CarmelBase.CarmelFingerprintStruct],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "verifyFingerprint"
  ): TypedContractMethod<
    [
      account: CarmelBase.CarmelAccountStruct,
      fingerprint: CarmelBase.CarmelFingerprintStruct
    ],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "version"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;

  filters: {
    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
  };
}
