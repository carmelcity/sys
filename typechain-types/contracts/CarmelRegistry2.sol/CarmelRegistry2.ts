/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace CarmelRegistry2 {
  export type AccountStruct = {
    id: BigNumberish;
    username: BytesLike;
    sysmeta0: BytesLike;
    sysmeta1: BytesLike;
    umeta0: BytesLike;
    umeta1: BytesLike;
    group: BytesLike;
    total_keys: BigNumberish;
    total_addresses: BigNumberish;
  };

  export type AccountStructOutput = [
    id: bigint,
    username: string,
    sysmeta0: string,
    sysmeta1: string,
    umeta0: string,
    umeta1: string,
    group: string,
    total_keys: bigint,
    total_addresses: bigint
  ] & {
    id: bigint;
    username: string;
    sysmeta0: string;
    sysmeta1: string;
    umeta0: string;
    umeta1: string;
    group: string;
    total_keys: bigint;
    total_addresses: bigint;
  };
}

export interface CarmelRegistry2Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "accounts"
      | "addAddress"
      | "addKey"
      | "addresses"
      | "authenticate"
      | "getGroup"
      | "initialize"
      | "keys_x"
      | "keys_y"
      | "perms"
      | "register"
      | "registerRaw"
      | "total_accounts"
      | "update"
      | "updatePerms"
      | "usernames"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;

  encodeFunctionData(functionFragment: "accounts", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "addAddress",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addKey",
    values: [BytesLike, [BigNumberish, BigNumberish]]
  ): string;
  encodeFunctionData(
    functionFragment: "addresses",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "authenticate",
    values: [
      BytesLike,
      BigNumberish,
      string,
      BytesLike,
      string,
      [BigNumberish, BigNumberish]
    ]
  ): string;
  encodeFunctionData(functionFragment: "getGroup", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "keys_x",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "keys_y",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "perms", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "register",
    values: [
      AddressLike,
      BytesLike,
      BytesLike,
      [BigNumberish, BigNumberish],
      [BytesLike, BytesLike],
      [BytesLike, BytesLike]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "registerRaw",
    values: [
      AddressLike,
      BytesLike,
      BytesLike,
      [BytesLike, BytesLike],
      [BytesLike, BytesLike]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "total_accounts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "update",
    values: [BytesLike, [BytesLike, BytesLike], [BytesLike, BytesLike]]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePerms",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "usernames",
    values: [BytesLike, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "accounts", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addAddress", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addKey", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addresses", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "authenticate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getGroup", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "keys_x", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "keys_y", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "perms", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "register", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerRaw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "total_accounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "update", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updatePerms",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "usernames", data: BytesLike): Result;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface CarmelRegistry2 extends BaseContract {
  connect(runner?: ContractRunner | null): CarmelRegistry2;
  waitForDeployment(): Promise<this>;

  interface: CarmelRegistry2Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  accounts: TypedContractMethod<
    [arg0: BytesLike],
    [
      [
        bigint,
        string,
        string,
        string,
        string,
        string,
        string,
        bigint,
        bigint
      ] & {
        id: bigint;
        username: string;
        sysmeta0: string;
        sysmeta1: string;
        umeta0: string;
        umeta1: string;
        group: string;
        total_keys: bigint;
        total_addresses: bigint;
      }
    ],
    "view"
  >;

  addAddress: TypedContractMethod<
    [addr: AddressLike, username: BytesLike],
    [void],
    "nonpayable"
  >;

  addKey: TypedContractMethod<
    [username: BytesLike, k: [BigNumberish, BigNumberish]],
    [void],
    "nonpayable"
  >;

  addresses: TypedContractMethod<
    [arg0: BytesLike, arg1: BigNumberish],
    [string],
    "view"
  >;

  authenticate: TypedContractMethod<
    [
      username: BytesLike,
      keyId: BigNumberish,
      command: string,
      authData: BytesLike,
      source: string,
      signature: [BigNumberish, BigNumberish]
    ],
    [boolean],
    "view"
  >;

  getGroup: TypedContractMethod<
    [grp: BytesLike],
    [CarmelRegistry2.AccountStructOutput[]],
    "view"
  >;

  initialize: TypedContractMethod<[], [void], "nonpayable">;

  keys_x: TypedContractMethod<
    [arg0: BytesLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  keys_y: TypedContractMethod<
    [arg0: BytesLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  perms: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  register: TypedContractMethod<
    [
      addr: AddressLike,
      grp: BytesLike,
      username: BytesLike,
      k: [BigNumberish, BigNumberish],
      sh: [BytesLike, BytesLike],
      uh: [BytesLike, BytesLike]
    ],
    [void],
    "nonpayable"
  >;

  registerRaw: TypedContractMethod<
    [
      addr: AddressLike,
      grp: BytesLike,
      username: BytesLike,
      sh: [BytesLike, BytesLike],
      uh: [BytesLike, BytesLike]
    ],
    [void],
    "nonpayable"
  >;

  total_accounts: TypedContractMethod<[], [bigint], "view">;

  update: TypedContractMethod<
    [
      username: BytesLike,
      sh: [BytesLike, BytesLike],
      uh: [BytesLike, BytesLike]
    ],
    [void],
    "nonpayable"
  >;

  updatePerms: TypedContractMethod<
    [addr: AddressLike, level: BigNumberish],
    [void],
    "nonpayable"
  >;

  usernames: TypedContractMethod<
    [arg0: BytesLike, arg1: BigNumberish],
    [string],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "accounts"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [
        bigint,
        string,
        string,
        string,
        string,
        string,
        string,
        bigint,
        bigint
      ] & {
        id: bigint;
        username: string;
        sysmeta0: string;
        sysmeta1: string;
        umeta0: string;
        umeta1: string;
        group: string;
        total_keys: bigint;
        total_addresses: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "addAddress"
  ): TypedContractMethod<
    [addr: AddressLike, username: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addKey"
  ): TypedContractMethod<
    [username: BytesLike, k: [BigNumberish, BigNumberish]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addresses"
  ): TypedContractMethod<
    [arg0: BytesLike, arg1: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "authenticate"
  ): TypedContractMethod<
    [
      username: BytesLike,
      keyId: BigNumberish,
      command: string,
      authData: BytesLike,
      source: string,
      signature: [BigNumberish, BigNumberish]
    ],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "getGroup"
  ): TypedContractMethod<
    [grp: BytesLike],
    [CarmelRegistry2.AccountStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "keys_x"
  ): TypedContractMethod<
    [arg0: BytesLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "keys_y"
  ): TypedContractMethod<
    [arg0: BytesLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "perms"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "register"
  ): TypedContractMethod<
    [
      addr: AddressLike,
      grp: BytesLike,
      username: BytesLike,
      k: [BigNumberish, BigNumberish],
      sh: [BytesLike, BytesLike],
      uh: [BytesLike, BytesLike]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "registerRaw"
  ): TypedContractMethod<
    [
      addr: AddressLike,
      grp: BytesLike,
      username: BytesLike,
      sh: [BytesLike, BytesLike],
      uh: [BytesLike, BytesLike]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "total_accounts"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "update"
  ): TypedContractMethod<
    [
      username: BytesLike,
      sh: [BytesLike, BytesLike],
      uh: [BytesLike, BytesLike]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updatePerms"
  ): TypedContractMethod<
    [addr: AddressLike, level: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "usernames"
  ): TypedContractMethod<
    [arg0: BytesLike, arg1: BigNumberish],
    [string],
    "view"
  >;

  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;

  filters: {
    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
  };
}
