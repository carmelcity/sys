/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  CarmelBase,
  CarmelBaseInterface,
} from "../../contracts/CarmelBase";

const _abi = [
  {
    inputs: [],
    name: "CarmelErrorAccountAlreadyExists",
    type: "error",
  },
  {
    inputs: [],
    name: "CarmelErrorAccountDoesNotExist",
    type: "error",
  },
  {
    inputs: [],
    name: "CarmelErrorAccountInvalidKeyId",
    type: "error",
  },
  {
    inputs: [],
    name: "CarmelErrorCannotWithdrawInsufficientFunds",
    type: "error",
  },
  {
    inputs: [],
    name: "CarmelErrorCannotWithdrawZeroAmount",
    type: "error",
  },
  {
    inputs: [],
    name: "CarmelErrorPermissionsAdminLevelRequired",
    type: "error",
  },
  {
    inputs: [],
    name: "CarmelErrorPermissionsSentinelLevelRequired",
    type: "error",
  },
  {
    inputs: [],
    name: "CarmelErrorUnauthorizedAccount",
    type: "error",
  },
] as const;

export class CarmelBase__factory {
  static readonly abi = _abi;
  static createInterface(): CarmelBaseInterface {
    return new Interface(_abi) as CarmelBaseInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): CarmelBase {
    return new Contract(address, _abi, runner) as unknown as CarmelBase;
  }
}
