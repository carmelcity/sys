/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  CarmelBase,
  CarmelBaseInterface,
} from "../../contracts/CarmelBase";

const _abi = [
  {
    inputs: [],
    name: "CarmelErrorAccountAlreadyExists",
    type: "error",
  },
  {
    inputs: [],
    name: "CarmelErrorAccountDoesNotExist",
    type: "error",
  },
  {
    inputs: [],
    name: "CarmelErrorAccountInvalidKeyId",
    type: "error",
  },
  {
    inputs: [],
    name: "CarmelErrorAssetMintingInsufficientBalance",
    type: "error",
  },
  {
    inputs: [],
    name: "CarmelErrorAssetMintingInvalidPrice",
    type: "error",
  },
  {
    inputs: [],
    name: "CarmelErrorAssetMintingInvalidQuantity",
    type: "error",
  },
  {
    inputs: [],
    name: "CarmelErrorAssetMintingMaxSupplyReached",
    type: "error",
  },
  {
    inputs: [],
    name: "CarmelErrorAssetMintingUnauthorized",
    type: "error",
  },
  {
    inputs: [],
    name: "CarmelErrorAssetNotMinted",
    type: "error",
  },
  {
    inputs: [],
    name: "CarmelErrorCannotWithdrawInsufficientFunds",
    type: "error",
  },
  {
    inputs: [],
    name: "CarmelErrorCannotWithdrawZeroAmount",
    type: "error",
  },
  {
    inputs: [],
    name: "CarmelErrorPermissionsAdminLevelRequired",
    type: "error",
  },
  {
    inputs: [],
    name: "CarmelErrorPermissionsSentinelLevelRequired",
    type: "error",
  },
  {
    inputs: [],
    name: "CarmelErrorUnauthorizedAccount",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "addr",
        type: "address",
      },
      {
        internalType: "uint8",
        name: "level",
        type: "uint8",
      },
    ],
    name: "updatePerms",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class CarmelBase__factory {
  static readonly abi = _abi;
  static createInterface(): CarmelBaseInterface {
    return new Interface(_abi) as CarmelBaseInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): CarmelBase {
    return new Contract(address, _abi, runner) as unknown as CarmelBase;
  }
}
