/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  CarmelAccount,
  CarmelAccountInterface,
} from "../../../contracts/CarmelAccount.sol/CarmelAccount";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
    ],
    name: "AccountUnauthorized",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidInitialization",
    type: "error",
  },
  {
    inputs: [],
    name: "NotInitializing",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint64",
        name: "version",
        type: "uint64",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "x",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "y",
        type: "bytes32",
      },
    ],
    name: "addPublicKey",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "entryPoint",
    outputs: [
      {
        internalType: "contract IEntryPoint",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint192",
        name: "key",
        type: "uint192",
      },
    ],
    name: "getNonce",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getNonce",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "hasPublicKey",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "usr",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "ep",
        type: "address",
      },
      {
        internalType: "address",
        name: "ver",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "x",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "y",
        type: "bytes32",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "username",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "sender",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "initCode",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
          {
            internalType: "bytes32",
            name: "accountGasLimits",
            type: "bytes32",
          },
          {
            internalType: "uint256",
            name: "preVerificationGas",
            type: "uint256",
          },
          {
            internalType: "bytes32",
            name: "gasFees",
            type: "bytes32",
          },
          {
            internalType: "bytes",
            name: "paymasterAndData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "signature",
            type: "bytes",
          },
        ],
        internalType: "struct PackedUserOperation",
        name: "userOp",
        type: "tuple",
      },
      {
        internalType: "bytes32",
        name: "userOpHash",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "missingAccountFunds",
        type: "uint256",
      },
    ],
    name: "validateUserOp",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x6080604052348015600f57600080fd5b506016601a565b60ca565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00805468010000000000000000900460ff161560695760405163f92ee8a960e01b815260040160405180910390fd5b80546001600160401b039081161460c75780546001600160401b0319166001600160401b0390811782556040519081527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b50565b610820806100d96000396000f3fe60806040526004361061007f5760003560e01c8063848975941161004e5780638489759414610176578063984eb1ac1461019b578063b0d691fe146101bb578063d087d288146101e357600080fd5b806319822f7c1461008b5780633e1b0812146100be57806361fac54d146100de578063810b9178146100f457600080fd5b3661008657005b600080fd5b34801561009757600080fd5b506100ab6100a63660046105f4565b6101f8565b6040519081526020015b60405180910390f35b3480156100ca57600080fd5b506100ab6100d9366004610648565b61023c565b3480156100ea57600080fd5b506100ab60045481565b34801561010057600080fd5b5061017461010f366004610678565b6002805460018181019092557f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace01929092556003805492830181556000527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b90910155565b005b34801561018257600080fd5b5061018b6102c8565b60405190151581526020016100b5565b3480156101a757600080fd5b506101746101b63660046106b6565b6102e2565b3480156101c757600080fd5b506000546040516001600160a01b0390911681526020016100b5565b3480156101ef57600080fd5b506100ab61047e565b600061020261048a565b600061021b81610216610100880188610704565b6104e0565b610226576001610229565b60005b9050610234836105a0565b949350505050565b600080546001600160a01b0316604051631aab3f0d60e11b81523060048201526001600160c01b03841660248201526001600160a01b0391909116906335567e1a90604401602060405180830381865afa15801561029e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102c29190610752565b92915050565b600254600090158015906102dd575060035415155b905090565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a008054600160401b810460ff16159067ffffffffffffffff166000811580156103285750825b905060008267ffffffffffffffff1660011480156103455750303b155b905081158015610353575080155b156103715760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff19166001178555831561039b57845460ff60401b1916600160401b1785555b60048a9055600080546001600160a01b03808c166001600160a01b031992831617835560018054918c1691909216178155600280548083019091557f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace018990556003805491820181559091527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b01869055831561047257845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b50505050505050505050565b60006102dd600061023c565b3361049d6000546001600160a01b031690565b6001600160a01b0316816001600160a01b0316146104dd57604051637cf8632b60e01b81526001600160a01b038216600482015260240160405180910390fd5b50565b600154600280546000926001600160a01b031691632526ac7a9187918791879190879061050f5761050f61076b565b906000526020600020015460001c60036000815481106105315761053161076b565b906000526020600020015460001c6040518663ffffffff1660e01b815260040161055f959493929190610781565b602060405180830381865afa15801561057c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061023491906107c8565b80156104dd57604051600090339083908381818185875af1925050503d80600081146105e8576040519150601f19603f3d011682016040523d82523d6000602084013e6105ed565b606091505b5050505050565b60008060006060848603121561060957600080fd5b833567ffffffffffffffff81111561062057600080fd5b8401610120818703121561063357600080fd5b95602085013595506040909401359392505050565b60006020828403121561065a57600080fd5b81356001600160c01b038116811461067157600080fd5b9392505050565b6000806040838503121561068b57600080fd5b50508035926020909101359150565b80356001600160a01b03811681146106b157600080fd5b919050565b600080600080600060a086880312156106ce57600080fd5b853594506106de6020870161069a565b93506106ec6040870161069a565b94979396509394606081013594506080013592915050565b6000808335601e1984360301811261071b57600080fd5b83018035915067ffffffffffffffff82111561073657600080fd5b60200191503681900382131561074b57600080fd5b9250929050565b60006020828403121561076457600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b85815260806020820152836080820152838560a0830137600060a08583010152600060a0601f19601f87011683010190508360408301528260608301529695505050505050565b6000602082840312156107da57600080fd5b8151801515811461067157600080fdfea2646970667358221220227eb3bc30c65c17e2a87c16f09878f73cf6a20578eed2b8f0c2d1fc7c76b80964736f6c634300081c0033";

type CarmelAccountConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CarmelAccountConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CarmelAccount__factory extends ContractFactory {
  constructor(...args: CarmelAccountConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      CarmelAccount & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): CarmelAccount__factory {
    return super.connect(runner) as CarmelAccount__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CarmelAccountInterface {
    return new Interface(_abi) as CarmelAccountInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): CarmelAccount {
    return new Contract(address, _abi, runner) as unknown as CarmelAccount;
  }
}
