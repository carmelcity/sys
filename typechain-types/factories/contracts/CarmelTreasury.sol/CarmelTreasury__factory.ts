/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  CarmelTreasury,
  CarmelTreasuryInterface,
} from "../../../contracts/CarmelTreasury.sol/CarmelTreasury";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "CarmelErrorAccountDoesNotExist",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidInitialization",
    type: "error",
  },
  {
    inputs: [],
    name: "NotInitializing",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes32",
        name: "username",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "CarmelDeposit",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint64",
        name: "version",
        type: "uint64",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "username",
        type: "bytes32",
      },
    ],
    name: "deposit",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "username",
        type: "bytes32",
      },
    ],
    name: "getBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "address",
        name: "reg",
        type: "address",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address payable",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "keyId",
            type: "uint256",
          },
          {
            internalType: "bytes32",
            name: "username",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "message",
            type: "bytes32",
          },
          {
            internalType: "bytes",
            name: "signature",
            type: "bytes",
          },
        ],
        internalType: "struct CarmelBase.CarmelFingerprint",
        name: "fingerprint",
        type: "tuple",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052348015600f57600080fd5b506016601a565b60ca565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00805468010000000000000000900460ff161560695760405163f92ee8a960e01b815260040160405180910390fd5b80546001600160401b039081161460c75780546001600160401b0319166001600160401b0390811782556040519081527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b50565b6105fa806100d96000396000f3fe60806040526004361061003f5760003560e01c8063485cc955146100445780634ce2e2b7146100665780638e73946114610079578063b214faa5146100b8575b600080fd5b34801561005057600080fd5b5061006461005f366004610414565b6100cb565b005b61006461007436600461044d565b610203565b34801561008557600080fd5b506100a66100943660046104ad565b60009081526020819052604090205490565b60405190815260200160405180910390f35b6100646100c63660046104ad565b61039e565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a008054600160401b810460ff16159067ffffffffffffffff166000811580156101115750825b905060008267ffffffffffffffff16600114801561012e5750303b155b90508115801561013c575080155b1561015a5760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff19166001178555831561018457845460ff60401b1916600160401b1785555b600280546001600160a01b03808a166001600160a01b031992831617909255600180549289169290911691909117905583156101fa57845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b50505050505050565b600154604051630252d7a760e51b81526001600160a01b0390911690634a5af4e0906102339084906004016104ef565b602060405180830381865afa158015610250573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102749190610574565b6102b65760405162461bcd60e51b815260206004820152600e60248201526d139bdd08185d5d1a1bdc9a5e995960921b60448201526064015b60405180910390fd5b600082116103065760405162461bcd60e51b815260206004820152601f60248201527f54686520616d6f756e74206e6565647320746f20626520706f7369746976650060448201526064016102ad565b81610321826020013560009081526020819052604090205490565b10156103625760405162461bcd60e51b815260206004820152601060248201526f4e6f7420656e6f7567682066756e647360801b60448201526064016102ad565b6040516001600160a01b0384169083156108fc029084906000818181858888f19350505050158015610398573d6000803e3d6000fd5b50505050565b600081815260208190526040812080543492906103bc90849061059d565b9091555050604080518281523460208201527f678e834f675c240497a0defda44cd2ec81d923da49672eb1a2cbb21ca189ed76910160405180910390a150565b6001600160a01b038116811461041157600080fd5b50565b6000806040838503121561042757600080fd5b8235610432816103fc565b91506020830135610442816103fc565b809150509250929050565b60008060006060848603121561046257600080fd5b833561046d816103fc565b925060208401359150604084013567ffffffffffffffff81111561049057600080fd5b8401608081870312156104a257600080fd5b809150509250925092565b6000602082840312156104bf57600080fd5b5035919050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b602080825282358282015282013560408083019190915282013560608083019190915260009083013536849003601e1901811261052b57600080fd5b830160208101903567ffffffffffffffff81111561054857600080fd5b80360382131561055757600080fd5b60808085015261056b60a0850182846104c6565b95945050505050565b60006020828403121561058657600080fd5b8151801515811461059657600080fd5b9392505050565b808201808211156105be57634e487b7160e01b600052601160045260246000fd5b9291505056fea26469706673582212205d4ac155282e0f646dfd5c7e5288f6fc1ebd284b41f30fcae9d3f99e9f1a7e4864736f6c634300081c0033";

type CarmelTreasuryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CarmelTreasuryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CarmelTreasury__factory extends ContractFactory {
  constructor(...args: CarmelTreasuryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      CarmelTreasury & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): CarmelTreasury__factory {
    return super.connect(runner) as CarmelTreasury__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CarmelTreasuryInterface {
    return new Interface(_abi) as CarmelTreasuryInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): CarmelTreasury {
    return new Contract(address, _abi, runner) as unknown as CarmelTreasury;
  }
}
