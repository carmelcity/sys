/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../common";
import type {
  CarmelRegistry,
  CarmelRegistryInterface,
} from "../../contracts/CarmelRegistry";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "InvalidInitialization",
    type: "error",
  },
  {
    inputs: [],
    name: "NotInitializing",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint64",
        name: "version",
        type: "uint64",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    inputs: [],
    name: "accountImpl",
    outputs: [
      {
        internalType: "contract CarmelAccount",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "accounts",
    outputs: [
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "username",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "group",
        type: "bytes32",
      },
      {
        internalType: "uint32",
        name: "total_keys",
        type: "uint32",
      },
      {
        internalType: "uint32",
        name: "total_addresses",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "username",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "x",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "y",
        type: "uint256",
      },
    ],
    name: "addKey",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "addresses",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "entryPointAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "grp",
        type: "bytes32",
      },
    ],
    name: "group",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "id",
            type: "uint256",
          },
          {
            internalType: "bytes32",
            name: "username",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "group",
            type: "bytes32",
          },
          {
            internalType: "uint32",
            name: "total_keys",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "total_addresses",
            type: "uint32",
          },
        ],
        internalType: "struct CarmelRegistry.Account[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "address",
        name: "ep",
        type: "address",
      },
      {
        internalType: "address",
        name: "ver",
        type: "address",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "keys_x",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "keys_y",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "perms",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "username",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "grp",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "addr",
        type: "address",
      },
    ],
    name: "register",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "total_accounts",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "addr",
        type: "address",
      },
      {
        internalType: "uint8",
        name: "level",
        type: "uint8",
      },
    ],
    name: "updatePerms",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "usernames",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "verifierAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "version",
    outputs: [
      {
        internalType: "uint16",
        name: "",
        type: "uint16",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052348015600f57600080fd5b506016601a565b60ca565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00805468010000000000000000900460ff161560695760405163f92ee8a960e01b815260040160405180910390fd5b80546001600160401b039081161460c75780546001600160401b0319166001600160401b0390811782556040519081527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b50565b611607806100d96000396000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c806377cdfa98116100a257806398ebbd3c1161007157806398ebbd3c14610220578063b409ea4e14610233578063b76b70d514610268578063bc529c431461027b578063c0c53b8b146102f357600080fd5b806377cdfa98146101d15780637993c18f146101da5780638804eb9f146101fa5780638da5cb5b1461020d57600080fd5b80631d381240116100de5780631d381240146101895780634aba00581461019c57806354fd4d50146101af57806356d9815a146101be57600080fd5b806306dc245c1461011057806315d7bf441461014057806316aac50e1461016157806318bdffbb14610176575b600080fd5b600154610123906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61015361014e366004610a7f565b610306565b604051908152602001610137565b61017461016f366004610ab4565b6104cc565b005b600454610123906001600160a01b031681565b610174610197366004610af1565b61052e565b6101536101aa366004610b1d565b610681565b60405160018152602001610137565b6101536101cc366004610b1d565b6106b2565b61015360055481565b6101ed6101e8366004610b3f565b6106ce565b6040516101379190610b58565b600054610123906001600160a01b031681565b600654610123906001600160a01b031681565b61015361022e366004610b1d565b610859565b610256610241366004610bd7565b60076020526000908152604090205460ff1681565b60405160ff9091168152602001610137565b610123610276366004610b1d565b610875565b6102c2610289366004610b3f565b60086020526000908152604090208054600182015460028301546003909301549192909163ffffffff8082169164010000000090041685565b6040805195865260208601949094529284019190915263ffffffff908116606084015216608082015260a001610137565b610174610301366004610bf9565b6108ad565b3360009081526007602052604081205460fa60ff90911610156103445760405162461bcd60e51b815260040161033b90610c33565b60405180910390fd5b600084815260086020908152604091829020825160a0810184528154815260018201549281018390526002820154938101939093526003015463ffffffff8082166060850152640100000000909104166080830152156103e65760405162461bcd60e51b815260206004820152601b60248201527f54686520757365726e616d6520616c7265616479206578697374730000000000604482015260640161033b565b600580546040805160a08101825282815260208082018a81528284018a81526000606085018181526001608087018181528f8452600887528884208851815595518683015593516002860155905160039094018054935163ffffffff9081166401000000000267ffffffffffffffff1990951695169490941792909217909255600a8352848220805480830182559083528383200180546001600160a01b038c166001600160a01b03199091161790558a825260098352938120805480860182559082529190200189905592549192916104bf91610c77565b6005555095945050505050565b3360009081526007602052604090205460fa60ff90911610156105015760405162461bcd60e51b815260040161033b90610c33565b6001600160a01b03919091166000908152600760205260409020805460ff191660ff909216919091179055565b3360009081526007602052604090205460fa60ff90911610156105635760405162461bcd60e51b815260040161033b90610c33565b600083815260086020908152604091829020825160a0810184528154815260018201549281018390526002820154938101939093526003015463ffffffff80821660608501526401000000009091041660808301526106045760405162461bcd60e51b815260206004820152601a60248201527f546865206163636f756e7420646f6573206e6f74206578697374000000000000604482015260640161033b565b60008481526002602090815260408083208054600181810183559185528385200187905587845260038352908320805480830182559084529190922001839055606082015161065291610c90565b600094855260086020526040909420600301805463ffffffff191663ffffffff90951694909417909355505050565b6002602052816000526040600020818154811061069d57600080fd5b90600052602060002001600091509150505481565b6009602052816000526040600020818154811061069d57600080fd5b600081815260096020908152604080832080548251818502810185019093528083526060949383018282801561072357602002820191906000526020600020905b81548152602001906001019080831161070f575b5050505050905060008151905060008167ffffffffffffffff81111561074b5761074b610cac565b6040519080825280602002602001820160405280156107a457816020015b6040805160a0810182526000808252602080830182905292820181905260608201819052608082015282526000199092019101816107695790505b50905060005b8281101561085057600860008583815181106107c8576107c8610cc2565b6020908102919091018101518252818101929092526040908101600020815160a081018352815481526001820154938101939093526002810154918301919091526003015463ffffffff8082166060840152640100000000909104166080820152825183908390811061083d5761083d610cc2565b60209081029190910101526001016107aa565b50949350505050565b6003602052816000526040600020818154811061069d57600080fd5b600a602052816000526040600020818154811061089157600080fd5b6000918252602090912001546001600160a01b03169150829050565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a008054600160401b810460ff16159067ffffffffffffffff166000811580156108f35750825b905060008267ffffffffffffffff1660011480156109105750303b155b90508115801561091e575080155b1561093c5760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff19166001178555831561096657845460ff60401b1916600160401b1785555b6001600160a01b0380891660008181526007602052604090819020805460ff191660fa179055600680546001600160a01b03199081169093179055600180548b851690841617905560048054938a1693909216929092179055516109c990610a56565b604051809103906000f0801580156109e5573d6000803e3d6000fd5b50600080546001600160a01b0319166001600160a01b03929092169190911790558315610a4c57845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b5050505050505050565b6108f980610cd983390190565b80356001600160a01b0381168114610a7a57600080fd5b919050565b600080600060608486031215610a9457600080fd5b8335925060208401359150610aab60408501610a63565b90509250925092565b60008060408385031215610ac757600080fd5b610ad083610a63565b9150602083013560ff81168114610ae657600080fd5b809150509250929050565b600080600060608486031215610b0657600080fd5b505081359360208301359350604090920135919050565b60008060408385031215610b3057600080fd5b50508035926020909101359150565b600060208284031215610b5157600080fd5b5035919050565b602080825282518282018190526000918401906040840190835b81811015610bcc57835180518452602081015160208501526040810151604085015263ffffffff606082015116606085015263ffffffff60808201511660808501525060a083019250602084019350600181019050610b72565b509095945050505050565b600060208284031215610be957600080fd5b610bf282610a63565b9392505050565b600080600060608486031215610c0e57600080fd5b610c1784610a63565b9250610c2560208501610a63565b9150610aab60408501610a63565b60208082526014908201527310591b5a5b881b195d995b081c995c5d5a5c995960621b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b80820180821115610c8a57610c8a610c61565b92915050565b63ffffffff8181168382160190811115610c8a57610c8a610c61565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fdfe6080604052348015600f57600080fd5b506016601a565b60ca565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00805468010000000000000000900460ff161560695760405163f92ee8a960e01b815260040160405180910390fd5b80546001600160401b039081161460c75780546001600160401b0319166001600160401b0390811782556040519081527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b50565b610820806100d96000396000f3fe60806040526004361061007f5760003560e01c8063848975941161004e5780638489759414610176578063984eb1ac1461019b578063b0d691fe146101bb578063d087d288146101e357600080fd5b806319822f7c1461008b5780633e1b0812146100be57806361fac54d146100de578063810b9178146100f457600080fd5b3661008657005b600080fd5b34801561009757600080fd5b506100ab6100a63660046105f4565b6101f8565b6040519081526020015b60405180910390f35b3480156100ca57600080fd5b506100ab6100d9366004610648565b61023c565b3480156100ea57600080fd5b506100ab60045481565b34801561010057600080fd5b5061017461010f366004610678565b6002805460018181019092557f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace01929092556003805492830181556000527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b90910155565b005b34801561018257600080fd5b5061018b6102c8565b60405190151581526020016100b5565b3480156101a757600080fd5b506101746101b63660046106b6565b6102e2565b3480156101c757600080fd5b506000546040516001600160a01b0390911681526020016100b5565b3480156101ef57600080fd5b506100ab61047e565b600061020261048a565b600061021b81610216610100880188610704565b6104e0565b610226576001610229565b60005b9050610234836105a0565b949350505050565b600080546001600160a01b0316604051631aab3f0d60e11b81523060048201526001600160c01b03841660248201526001600160a01b0391909116906335567e1a90604401602060405180830381865afa15801561029e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102c29190610752565b92915050565b600254600090158015906102dd575060035415155b905090565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a008054600160401b810460ff16159067ffffffffffffffff166000811580156103285750825b905060008267ffffffffffffffff1660011480156103455750303b155b905081158015610353575080155b156103715760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff19166001178555831561039b57845460ff60401b1916600160401b1785555b60048a9055600080546001600160a01b03808c166001600160a01b031992831617835560018054918c1691909216178155600280548083019091557f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace018990556003805491820181559091527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b01869055831561047257845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b50505050505050505050565b60006102dd600061023c565b3361049d6000546001600160a01b031690565b6001600160a01b0316816001600160a01b0316146104dd57604051637cf8632b60e01b81526001600160a01b038216600482015260240160405180910390fd5b50565b600154600280546000926001600160a01b031691632526ac7a9187918791879190879061050f5761050f61076b565b906000526020600020015460001c60036000815481106105315761053161076b565b906000526020600020015460001c6040518663ffffffff1660e01b815260040161055f959493929190610781565b602060405180830381865afa15801561057c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061023491906107c8565b80156104dd57604051600090339083908381818185875af1925050503d80600081146105e8576040519150601f19603f3d011682016040523d82523d6000602084013e6105ed565b606091505b5050505050565b60008060006060848603121561060957600080fd5b833567ffffffffffffffff81111561062057600080fd5b8401610120818703121561063357600080fd5b95602085013595506040909401359392505050565b60006020828403121561065a57600080fd5b81356001600160c01b038116811461067157600080fd5b9392505050565b6000806040838503121561068b57600080fd5b50508035926020909101359150565b80356001600160a01b03811681146106b157600080fd5b919050565b600080600080600060a086880312156106ce57600080fd5b853594506106de6020870161069a565b93506106ec6040870161069a565b94979396509394606081013594506080013592915050565b6000808335601e1984360301811261071b57600080fd5b83018035915067ffffffffffffffff82111561073657600080fd5b60200191503681900382131561074b57600080fd5b9250929050565b60006020828403121561076457600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b85815260806020820152836080820152838560a0830137600060a08583010152600060a0601f19601f87011683010190508360408301528260608301529695505050505050565b6000602082840312156107da57600080fd5b8151801515811461067157600080fdfea2646970667358221220227eb3bc30c65c17e2a87c16f09878f73cf6a20578eed2b8f0c2d1fc7c76b80964736f6c634300081c0033a26469706673582212207ac44327850002550c04830060b8a98410413d8f5ff34e54aad9fffee56b867164736f6c634300081c0033";

type CarmelRegistryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CarmelRegistryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CarmelRegistry__factory extends ContractFactory {
  constructor(...args: CarmelRegistryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      CarmelRegistry & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): CarmelRegistry__factory {
    return super.connect(runner) as CarmelRegistry__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CarmelRegistryInterface {
    return new Interface(_abi) as CarmelRegistryInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): CarmelRegistry {
    return new Contract(address, _abi, runner) as unknown as CarmelRegistry;
  }
}
