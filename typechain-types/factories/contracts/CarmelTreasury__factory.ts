/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../common";
import type {
  CarmelTreasury,
  CarmelTreasuryInterface,
} from "../../contracts/CarmelTreasury";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "CarmelErrorAccountAlreadyExists",
    type: "error",
  },
  {
    inputs: [],
    name: "CarmelErrorAccountDoesNotExist",
    type: "error",
  },
  {
    inputs: [],
    name: "CarmelErrorAccountInvalidKeyId",
    type: "error",
  },
  {
    inputs: [],
    name: "CarmelErrorCannotWithdrawInsufficientFunds",
    type: "error",
  },
  {
    inputs: [],
    name: "CarmelErrorCannotWithdrawZeroAmount",
    type: "error",
  },
  {
    inputs: [],
    name: "CarmelErrorPermissionsAdminLevelRequired",
    type: "error",
  },
  {
    inputs: [],
    name: "CarmelErrorPermissionsSentinelLevelRequired",
    type: "error",
  },
  {
    inputs: [],
    name: "CarmelErrorUnauthorizedAccount",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidInitialization",
    type: "error",
  },
  {
    inputs: [],
    name: "NotInitializing",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes32",
        name: "username",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "CarmelDeposit",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint64",
        name: "version",
        type: "uint64",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "username",
        type: "bytes32",
      },
    ],
    name: "deposit",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "username",
        type: "bytes32",
      },
    ],
    name: "getBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "address",
        name: "reg",
        type: "address",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address payable",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "keyId",
            type: "uint256",
          },
          {
            internalType: "bytes32",
            name: "username",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "message",
            type: "bytes32",
          },
          {
            internalType: "bytes",
            name: "signature",
            type: "bytes",
          },
        ],
        internalType: "struct CarmelBase.CarmelFingerprint",
        name: "fingerprint",
        type: "tuple",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5061002b676f6bdefa6e76637260c01b61007260201b60201c565b6100456776e26a9281d2800760c01b61007260201b60201c565b61005f675d673ca539a53fbc60c01b61007260201b60201c565b61006d61007560201b60201c565b6101df565b50565b600061008561017960201b60201c565b90508060000160089054906101000a900460ff16156100d0576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b67ffffffffffffffff80168160000160009054906101000a900467ffffffffffffffff1667ffffffffffffffff16146101765767ffffffffffffffff8160000160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055507fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d267ffffffffffffffff60405161016d91906101c4565b60405180910390a15b50565b60007ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00905090565b600067ffffffffffffffff82169050919050565b6101be816101a1565b82525050565b60006020820190506101d960008301846101b5565b92915050565b610cfa806101ee6000396000f3fe60806040526004361061003f5760003560e01c8063485cc955146100445780634ce2e2b71461006d5780638e73946114610089578063b214faa5146100c6575b600080fd5b34801561005057600080fd5b5061006b600480360381019061006691906107b9565b6100e2565b005b61008760048036038101906100829190610891565b61034f565b005b34801561009557600080fd5b506100b060048036038101906100ab9190610936565b610619565b6040516100bd9190610972565b60405180910390f35b6100e060048036038101906100db9190610936565b610671565b005b6100f667a13b2dfd52470e3a60c01b610726565b6000610100610729565b905060008160000160089054906101000a900460ff1615905060008260000160009054906101000a900467ffffffffffffffff1690506000808267ffffffffffffffff1614801561014e5750825b9050600060018367ffffffffffffffff16148015610183575060003073ffffffffffffffffffffffffffffffffffffffff163b145b905081158015610191575080155b156101c8576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60018560000160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555083156102185760018560000160086101000a81548160ff0219169083151502179055505b61022c678e5afaa2602721db60c01b610726565b6102406740d0fc5dbfd675a860c01b610726565b61025467db44852f4ddc461c60c01b610726565b86600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506102a967eb70008039428f6c60c01b610726565b85600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083156103465760008560000160086101000a81548160ff0219169083151502179055507fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2600160405161033d91906109e6565b60405180910390a15b50505050505050565b610363678ed9c8e111ca48df60c01b610726565b6103776724f2c81d0039621760c01b610726565b61038b67ecb7a69480765e4f60c01b610726565b600082116103d9576103a767284099520f49aabb60c01b610726565b6040517fa6e8bca500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6103ed671aee8292c97b412e60c01b610726565b61040167a0bb106136b1752a60c01b610726565b6104156720768f971f82b48760c01b610726565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634a5af4e0826040518263ffffffff1660e01b81526004016104709190610ba2565b602060405180830381865afa15801561048d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104b19190610bfc565b6104fb576104c967d5da153b0ba05c9560c01b610726565b6040517f9fd8ceca00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61050f67c66c6caa6a81f37860c01b610726565b61052367fb3dc6b95b47cddf60c01b610726565b6105376756ef4da8126ce74760c01b610726565b816105458260200135610619565b10156105915761055f67f41e86a45622696660c01b610726565b6040517f790edb6900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6105a567c024fd44daedbc4560c01b610726565b6105b96781a7d1fcfac7251f60c01b610726565b6105cd67504ca26992450d1260c01b610726565b8273ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f19350505050158015610613573d6000803e3d6000fd5b50505050565b600061062f6713765fd4097fe3b060c01b610726565b6106436771fca5197be0eae760c01b610726565b61065767f54ceb62d984558b60c01b610726565b600080838152602001908152602001600020549050919050565b61068567efe7a27888c4f81a60c01b610726565b61069967bc9bbd5f59a6d22e60c01b610726565b3460008083815260200190815260200160002060008282546106bb9190610c58565b925050819055506106d667f7966b111ad32d3d60c01b610726565b6106ea67e7422501800d174f60c01b610726565b7f678e834f675c240497a0defda44cd2ec81d923da49672eb1a2cbb21ca189ed76813460405161071b929190610c9b565b60405180910390a150565b50565b60007ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006107868261075b565b9050919050565b6107968161077b565b81146107a157600080fd5b50565b6000813590506107b38161078d565b92915050565b600080604083850312156107d0576107cf610751565b5b60006107de858286016107a4565b92505060206107ef858286016107a4565b9150509250929050565b60006108048261075b565b9050919050565b610814816107f9565b811461081f57600080fd5b50565b6000813590506108318161080b565b92915050565b6000819050919050565b61084a81610837565b811461085557600080fd5b50565b60008135905061086781610841565b92915050565b600080fd5b6000608082840312156108885761088761086d565b5b81905092915050565b6000806000606084860312156108aa576108a9610751565b5b60006108b886828701610822565b93505060206108c986828701610858565b925050604084013567ffffffffffffffff8111156108ea576108e9610756565b5b6108f686828701610872565b9150509250925092565b6000819050919050565b61091381610900565b811461091e57600080fd5b50565b6000813590506109308161090a565b92915050565b60006020828403121561094c5761094b610751565b5b600061095a84828501610921565b91505092915050565b61096c81610837565b82525050565b60006020820190506109876000830184610963565b92915050565b6000819050919050565b600067ffffffffffffffff82169050919050565b6000819050919050565b60006109d06109cb6109c68461098d565b6109ab565b610997565b9050919050565b6109e0816109b5565b82525050565b60006020820190506109fb60008301846109d7565b92915050565b6000610a106020840184610858565b905092915050565b610a2181610837565b82525050565b6000610a366020840184610921565b905092915050565b610a4781610900565b82525050565b600080fd5b600080fd5b600080fd5b60008083356001602003843603038112610a7957610a78610a57565b5b83810192508235915060208301925067ffffffffffffffff821115610aa157610aa0610a4d565b5b600182023603831315610ab757610ab6610a52565b5b509250929050565b600082825260208201905092915050565b82818337600083830152505050565b6000601f19601f8301169050919050565b6000610afc8385610abf565b9350610b09838584610ad0565b610b1283610adf565b840190509392505050565b600060808301610b306000840184610a01565b610b3d6000860182610a18565b50610b4b6020840184610a27565b610b586020860182610a3e565b50610b666040840184610a27565b610b736040860182610a3e565b50610b816060840184610a5c565b8583036060870152610b94838284610af0565b925050508091505092915050565b60006020820190508181036000830152610bbc8184610b1d565b905092915050565b60008115159050919050565b610bd981610bc4565b8114610be457600080fd5b50565b600081519050610bf681610bd0565b92915050565b600060208284031215610c1257610c11610751565b5b6000610c2084828501610be7565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610c6382610837565b9150610c6e83610837565b9250828201905080821115610c8657610c85610c29565b5b92915050565b610c9581610900565b82525050565b6000604082019050610cb06000830185610c8c565b610cbd6020830184610963565b939250505056fea26469706673582212203b83f62537ce38062ad47bd5c4ec010425e44f9dd9176994cd7c310efa37d0b764736f6c634300081c0033";

type CarmelTreasuryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CarmelTreasuryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CarmelTreasury__factory extends ContractFactory {
  constructor(...args: CarmelTreasuryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      CarmelTreasury & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): CarmelTreasury__factory {
    return super.connect(runner) as CarmelTreasury__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CarmelTreasuryInterface {
    return new Interface(_abi) as CarmelTreasuryInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): CarmelTreasury {
    return new Contract(address, _abi, runner) as unknown as CarmelTreasury;
  }
}
