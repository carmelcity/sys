/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../common";
import type {
  CarmelAccount,
  CarmelAccountInterface,
} from "../../contracts/CarmelAccount";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
    ],
    name: "AccountUnauthorized",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidInitialization",
    type: "error",
  },
  {
    inputs: [],
    name: "NotInitializing",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint64",
        name: "version",
        type: "uint64",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "x",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "y",
        type: "bytes32",
      },
    ],
    name: "addPublicKey",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "entryPoint",
    outputs: [
      {
        internalType: "contract IEntryPoint",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "entryPointAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint192",
        name: "key",
        type: "uint192",
      },
    ],
    name: "getNonce",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getNonce",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "hasPublicKey",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "ep",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "x",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "y",
        type: "bytes32",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "sender",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "initCode",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
          {
            internalType: "bytes32",
            name: "accountGasLimits",
            type: "bytes32",
          },
          {
            internalType: "uint256",
            name: "preVerificationGas",
            type: "uint256",
          },
          {
            internalType: "bytes32",
            name: "gasFees",
            type: "bytes32",
          },
          {
            internalType: "bytes",
            name: "paymasterAndData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "signature",
            type: "bytes",
          },
        ],
        internalType: "struct PackedUserOperation",
        name: "userOp",
        type: "tuple",
      },
      {
        internalType: "bytes32",
        name: "userOpHash",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "missingAccountFunds",
        type: "uint256",
      },
    ],
    name: "validateUserOp",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "hash",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "r",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "s",
        type: "bytes32",
      },
    ],
    name: "verify",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x6080604052348015600f57600080fd5b506016601a565b60ca565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00805468010000000000000000900460ff161560695760405163f92ee8a960e01b815260040160405180910390fd5b80546001600160401b039081161460c75780546001600160401b0319166001600160401b0390811782556040519081527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b50565b611173806100d96000396000f3fe60806040526004361061008a5760003560e01c8063810b917811610059578063810b91781461015157806384897594146101d057806385f812c3146101e5578063b0d691fe14610205578063d087d2881461022357600080fd5b806306dc245c1461009657806319822f7c146100d35780633e1b0812146101015780633fb820281461012157600080fd5b3661009157005b600080fd5b3480156100a257600080fd5b506000546100b6906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156100df57600080fd5b506100f36100ee366004610f36565b610238565b6040519081526020016100ca565b34801561010d57600080fd5b506100f361011c366004610f8a565b610280565b34801561012d57600080fd5b5061014161013c366004610fb3565b61030c565b60405190151581526020016100ca565b34801561015d57600080fd5b506101ce61016c366004610fdf565b6001805480820182557fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf601929092556002805492830181556000527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace90910155565b005b3480156101dc57600080fd5b50610141610357565b3480156101f157600080fd5b506101ce610200366004611001565b610371565b34801561021157600080fd5b506000546001600160a01b03166100b6565b34801561022f57600080fd5b506100f36104f4565b6000610242610500565b600061025f8161025661010088018861102d565b60019392505050565b61026a57600161026d565b60005b905061027883610556565b949350505050565b600080546001600160a01b0316604051631aab3f0d60e11b81523060048201526001600160c01b03841660248201526001600160a01b0391909116906335567e1a90604401602060405180830381865afa1580156102e2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610306919061107b565b92915050565b6000610278848484600160008154811061032857610328611094565b9060005260206000200154600260008154811061034757610347611094565b90600052602060002001546105aa565b6001546000901580159061036c575060025415155b905090565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a008054600160401b810460ff16159067ffffffffffffffff166000811580156103b75750825b905060008267ffffffffffffffff1660011480156103d45750303b155b9050811580156103e2575080155b156104005760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff19166001178555831561042a57845460ff60401b1916600160401b1785555b600080546001600160a01b0319166001600160a01b038a161781556001805480820182557fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6018990556002805491820181559091527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0186905583156104ea57845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b5050505050505050565b600061036c6000610280565b336105136000546001600160a01b031690565b6001600160a01b0316816001600160a01b03161461055357604051637cf8632b60e01b81526001600160a01b038216600482015260240160405180910390fd5b50565b801561055357604051600090339083908381818185875af1925050503d806000811461059e576040519150601f19603f3d011682016040523d82523d6000602084013e6105a3565b606091505b5050505050565b60008060006105bc88888888886105e7565b91509150806105d7576105d288888888886106eb565b6105d9565b815b925050505b95945050505050565b6000806105f486866107a6565b158061060757506106058484610802565b155b1561061857506000905060016106e1565b6040805160208101899052908101879052606081018690526080810185905260a0810184905260009081906101009060c00160408051601f1981840301815290829052610664916110aa565b600060405180830381855afa9150503d806000811461069f576040519150601f19603f3d011682016040523d82523d6000602084013e6106a4565b606091505b50915091508180156106b7575080516020145b6106c3576000806106da565b808060200190518101906106d791906110d9565b60015b9350935050505b9550959350505050565b60006106f785856107a6565b158061070a57506107088383610802565b155b15610717575060006105de565b60006107238484610867565b9050600061073f8660008051602061111e833981519152610a5e565b9050600060008051602061111e833981519152828a099050600060008051602061111e833981519152838a099050600061077a858484610a6e565b5090508961079660008051602061111e833981519152836110fb565b149b9a5050505050505050505050565b600082158015906107c4575060008051602061111e83398151915283105b80156107cf57508115155b80156107fb57507f7fffffff800000007fffffffffffffffde737d56d38bcf4279dce5617e3192a88211155b9392505050565b6000600160601b63ffffffff60c01b031980838409817f5ac635d8aa3a93e7b3ebbd55769886bc651d06b0cc53b0f63bce3c3e27d2604b8387856003600160601b0363ffffffff60c01b0319878b8c0908090894821191909310169190921416919050565b61086f610eec565b604051806060016040528060008152602001600081526020016000815250816000601081106108a0576108a0611094565b602002018190525060405180606001604052808481526020018381526020016001815250816001601081106108d7576108d7611094565b602002018190525060405180606001604052807f6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c29681526020017f4fe342e2fe1a7f9b8ee7eb4a7c0f9e162bce33576b315ececbb6406837bf51f5815260200160018152508160046010811061094e5761094e611094565b60200201526109648160015b6020020151610b96565b604082015261097481600461095a565b6101008201526020810151610991908260025b6020020151610bf8565b60608201526109aa8160015b6020020151826004610987565b60a08201526109ba81600261099d565b60c08201526109ca81600361099d565b60e08201526109e38160015b6020020151826008610987565b6101208201526109f48160026109d6565b610140820152610a058160036109d6565b610160820152610a168160046109d6565b610180820152610a308160015b602002015182600c610987565b6101a0820152610a41816002610a23565b6101c0820152610a52816003610a23565b6101e082015292915050565b60006107fb836002840384610c5c565b6000806000806000805b6080811015610b7a578115610aac57610a92848484610c7f565b91955093509150610aa4848484610c7f565b919550935091505b600c60fc89901c1660fe88901c17898160108110610acc57610acc611094565b60200201516040015115610b665782600003610b3c57898160108110610af457610af4611094565b6020020151518a8260108110610b0c57610b0c611094565b6020020151602001518b8360108110610b2757610b27611094565b60200201516040015191965094509250610b66565b610b5e8a8260108110610b5157610b51611094565b6020020151868686610d04565b919650945092505b50600297881b979690961b95600101610a78565b50610b86838383610e32565b945094505050505b935093915050565b610bba60405180606001604052806000815260200160008152602001600081525090565b6000806000610bd6856000015186602001518760400151610c7f565b6040805160608101825293845260208401929092529082015295945050505050565b610c1c60405180606001604052806000815260200160008152602001600081525090565b6000806000610c3986866000015187602001518860400151610d04565b604080516060810182529384526020840192909252908201529695505050505050565b6000806000610c6c868686610e83565b91509150816105de576105de6012610eda565b6000806000600160601b63ffffffff60c01b031980868709818687098283848384096003600160601b0363ffffffff60c01b03190984858c8d096003090890508283838b09600409838482600209850385848509089650838485858609600809850385868a880385088509089550505050808186880960020991505093509350939050565b6000806000600160601b63ffffffff60c01b0319604088015181818209828388858a8b090960208c0151098381850385868686098c090884858a8b098d51098581870387868f0908935081158415168015610d665760018114610dac57610e21565b868586098788898386096002098903898a848a098b038b88890908089a5087888983890987098903898a8e8c038c8689090887090899505086878c880986099750610e21565b8c8c8c898283098a8283098b8c8d8384096003600160601b0363ffffffff60c01b0319098d8e8889096003090890508b8c83870960040994508b8c866002098d038d838409089e508b8c8384096008098c0391508b8f8d03860894508b828d878409089d505050898a8284096002099a505050505b505050505050509450945094915050565b60008082600003610e4857506000905080610b8e565b600160601b63ffffffff60c01b03196000610e638583610a5e565b905081818209828189099450828383830988099350505050935093915050565b60008082600003610e9957506000905080610b8e565b60405160208152602080820152602060408201528560608201528460808201528360a08201526020600060c08360055afa9250506000519050935093915050565b634e487b71600052806020526024601cfd5b6040518061020001604052806010905b610f2060405180606001604052806000815260200160008152602001600081525090565b815260200190600190039081610efc5790505090565b600080600060608486031215610f4b57600080fd5b833567ffffffffffffffff811115610f6257600080fd5b84016101208187031215610f7557600080fd5b95602085013595506040909401359392505050565b600060208284031215610f9c57600080fd5b81356001600160c01b03811681146107fb57600080fd5b600080600060608486031215610fc857600080fd5b505081359360208301359350604090920135919050565b60008060408385031215610ff257600080fd5b50508035926020909101359150565b60008060006060848603121561101657600080fd5b83356001600160a01b0381168114610f7557600080fd5b6000808335601e1984360301811261104457600080fd5b83018035915067ffffffffffffffff82111561105f57600080fd5b60200191503681900382131561107457600080fd5b9250929050565b60006020828403121561108d57600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b6000825160005b818110156110cb57602081860181015185830152016110b1565b506000920191825250919050565b6000602082840312156110eb57600080fd5b815180151581146107fb57600080fd5b60008261111857634e487b7160e01b600052601260045260246000fd5b50069056feffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551a26469706673582212200f4c3705bab9d15e3f65dce96a861a71c20f85954820582c0f832d264344789064736f6c634300081c0033";

type CarmelAccountConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CarmelAccountConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CarmelAccount__factory extends ContractFactory {
  constructor(...args: CarmelAccountConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      CarmelAccount & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): CarmelAccount__factory {
    return super.connect(runner) as CarmelAccount__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CarmelAccountInterface {
    return new Interface(_abi) as CarmelAccountInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): CarmelAccount {
    return new Contract(address, _abi, runner) as unknown as CarmelAccount;
  }
}
